[{"content":"","permalink":"https://wqnm1gb.github.io/posts/my-new-post/","summary":"","title":"My New Post"},{"content":"对象 对象是一种特殊的数据结构，可以用来记住一个事物的数据，从而代表该事物\n1、先设计一个对象的模板，也就是对象的设计图：类\n2、通过new关键字，每new一次就得到一个新的对象\n内存分成了栈内存，堆内存和方法区\n方法区存放类文件\nnew出来的东西叫做对象，会放在堆里边\n方法需要使用的时候，会被掉到栈内存中\n设计对象的关键就是设计类，对象的模板\n构造器 创建对象的时候，对象会自动的调用构造器\n常见应用场景\n构造器的作用： 创建对象时，同时完成对对象成员变量（属性）的初始化赋值、\n//构造器的语法 class Student{ public Student(){ //名字必须要和类名相同，可以带参数也可以不带参数，没有返回值 } } 构造器的注意事项 1、类默认就带了一个无参构造器\n2、如果类定义了有参构造器，类默认的无参构造器就没有了，此时如果还想用无参构造器，就要自己手写一个无参构造器\nthis关键字 this就是一个变量，可以用在方法中，来拿到当前对象（拿的对象地址）\n哪个对象调用这个方法，this就拿到哪个对象\n**this对象主要用来解决：****变量名称冲突**的问题\n成员变量与方法内部变量的名称一样的时候，导致的命名冲突的问题\n封装 面向对象的三大特征：封装，继承，多态\n类，方法就是一种封装\n封装的设计要求\n合理隐藏，合理暴露\n如何隐藏：使用private关键字进行修饰成员变量，就只能在本类中被直接访问，其他任何地方不能直接访问\n如何暴露： 使用public修饰的get和set方法合理暴露成员变量的取值和\nJavabean（实体类） 是一种特殊类，满足下列要求\n1、类中的成员变量全是私有的，并且提供public修饰的getter和setter方法\n2、需要提供一个无参数的构造器，有参数的可选\n实体类的基本作用：创建他的新对象，存取数据（封装数据）\n实体类的应用场景：\n实体类的对象只负责数据的存取，而不负责数据的处理，数据的处理交给其他类的对象来完成，已实现数据和业务处理相分离\nstatic关键字 static修饰变量 可以用来修饰成员变量和成员方法\n类在运行的时候只会被加载一次\n成员变量按照有无static修饰可以分成两种：\n1、静态变量（类变量）：有static修饰属于类，在计算机中只有一份，会被全部对象共享，以最后的改动为准\n2、实例变量（对象的变量）（实例就是对象，对象就是实例（实例化之后就会占用内存） ，类是比他们高一个等级的抽象概念（不占用内存））：无static修饰，属于每个对象的\n推荐访问静态变量的方式\n类名.静态变量（推荐）\n实例名.静态变量（不推荐）\n静态变量的应用场景\n**如果某个数据只需要一份，且希望能够被共享（访问、修改），则该数据可以定义成静态变量来记住 **\n同一个类中，访问静态成员，可以省略类名不写\nstatic修饰方法 静态方法：有static修饰的成员方法，属于类持有\n实例方法：无static修饰的成员方法，属于对象\n如果这个方法只是为了做一个功能并且不需要直接访问对象的数据，这个方法直接定义为静态方法\n如果这个方法是对象的行为，需要访问对象的数据，这个方法必须定义为实例方法\n常见应用场景：做工具类，工具类中的所有方法都是一些静态方法，每一个方法来完成一个功能\n使用工具类的好处：提高代码复用，调用方便，提高了开发效率，不会占用内存\n工具类没有必要创建对象，可以把构造器进行私有化\npublic class Tools{ private Tools(){ //别人无法创建这个类 } } public修饰和没有关键字修饰（只能用这两种修饰符来修饰类） public修饰符 类级别: 如果一个类被声明为 public，它可以被任何地方访问，无论是在同一个包内还是其他包中，只要导入了该类所在的包。\n方法/字段级别: 如果类的成员（方法或字段）被声明为 public，那么任何类都可以访问这些成员，无论它们位于哪个包。\n没有修饰符（Package-private） **类级别: **如果一个类没有使用任何修饰符（即默认情况下），它只能在同一个包内访问。其他包中的类无法访问这个类，即使它们导入了该包。\n方法/字段级别: 如果类中的方法或字段没有使用访问修饰符，它们只能在同一个包内访问，而不能被其他包中的类访问。\n静态方法，实例方法的注意事项 1、静态方法中可以**直接访问静态成员****， 不可以直接访问实例成员**\n2、实例方法中既可以直接访问静态成员，也可以直接访问实例成员\n3、实例方法中可以出现this关键字，静态方法中**不可以出现this关键字**\n","permalink":"https://wqnm1gb.github.io/posts/day05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/","summary":"\u003ch2 id=\"对象\"\u003e对象\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e对象是一种特殊的数据结构，可以用来记住一个事物的数据，从而代表该事物\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e1、先设计一个对象的模板，也就是对象的设计图：类\u003c/p\u003e\n\u003cp\u003e2、通过new关键字，每new一次就得到一个新的对象\u003c/p\u003e","title":"Day05 面向对象编程"},{"content":" ","permalink":"https://wqnm1gb.github.io/posts/testpicture/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.nlark.com/yuque/0/2024/png/28219979/1728611073038-cdcb6289-b485-4060-9727-8c3732d22bfe.png\" alt=\"\"  /\u003e\n\u003c/p\u003e","title":"testPicture"},{"content":"无限循环 无限循环下边不能再写其他的代码了，因为执行不到了\n//for格式的无限循环 for(;;){ } //while格式的无限循环 while(true){ } continue和break continue：跳过本次循环，继续执行下次循环\nbreak：结束整个循环\nRandom类 使用步骤：\nimport java.util.Random; Random r = new Random(); int num = r.nextInt(随机数范围); int num = r.nextInt(100);//0~99内取值 //生成任意随机数的方法 //例如我要生成1~100的随机数 //先把左边的范围变成0，然后通过加法补上 //例如要生成1~100之间的随机数 import java.util.Random; Random r = new Random(); //首先生成0~99的数字，然后再+1，变成1~100 int num = r.nextInt(100)+1; 随机数的范围，包头不包尾，包左不包右\n0-100 包括0但是不包括100\n数组 数组：是一种容器，可以存储同种数据类型的多个值\n完整格式：数据类型[] 数组名 = new 数据类型[]{元素1,元素2,元素3\u0026hellip;};\nint[] array = new int[]{11,22,33} //简化格式 int[] arrary = {11,22,33}; array.length可以快速的获取数组的长度\n二维数组中的每一个数据都是一个一维数组\nfor-each循环 public class TestArray { public static void main(String[] args) { double[] myList = {1.9, 2.9, 3.4, 3.5}; // 打印所有数组元素 for (double element: myList) { System.out.println(element); } } } 数组的动态初始化和静态初始化 静态初始化：初始化的时候直接赋值\n动态初始化：初始化的时候只指定数组的长度，由系统为数组分配初始值\nint[] array = new int[3]; 数组默认初始化值的规律\n1、整数类型：默认初始化值是0\n2、小数类型：默认初始化值是0.0\n3、字符类型：默认初始化值是\u0026rsquo;/u0000\u0026rsquo; 显示出来是一个空格\n4、布尔类型：默认初始化值是FALSE\n5、引用数据类型：默认初始化值是null\n换行输出和不换行输出 System.out.print(\u0026#34;这是不换行输出\u0026#34;); System.out.println(\u0026#34;这是换行输出\u0026#34;); 拆分数字 12345这个四位数\n拆分 12345%10=5 12345/10=1234 1234%10=4 1234/10=123 123%10=3 123/10=12 12%10=2 12/10=1 1%10=1 1/10=0 //循环结束 组合 //组合是从高位向低位组合，比如说给出的是1，2，3，4这样的顺序 sum=0; sum = 1 + sum*10; //sum=1 sum = 2 + sum*10;//sum=12 sum = 3 + sum*10//sum=123 方法 方法：是程序中最小的执行单元\n要么全都一起执行，要么全都不执行\n要先定义后调用\n方法的定义和调用 无参数无返回值的方法 定义： public static void 方法名(){ 方法体; } 调用： 方法名(); 带参数无返回值的方法 定义： public static void 方法名(类型 参数1,类型 参数2，,...){ //形参 方法体; } 调用： 方法名(参数1,参数2); //实参 带参数带返回值的方法 定义： public static 返回值类型 方法名(类型 参数1,类型 参数2，,...){ //形参 方法体; return 返回值; } 调用： 直接调用 方法名(参数1,参数2); //实参 赋值调用 整数类型 变量名= 方法名（实参）; 输出调用 System.out.println(方法名(实参)); ","permalink":"https://wqnm1gb.github.io/posts/day04-%E6%95%B0%E7%BB%84%E5%92%8C%E6%96%B9%E6%B3%95/","summary":"\u003ch2 id=\"无限循环\"\u003e无限循环\u003c/h2\u003e\n\u003cp\u003e无限循环下边不能再写其他的代码了，因为执行不到了\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//for格式的无限循环\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(;;){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//while格式的无限循环\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"continue和break\"\u003econtinue和break\u003c/h2\u003e\n\u003cp\u003econtinue：跳过本次循环，继续执行下次循环\u003c/p\u003e\n\u003cp\u003ebreak：结束整个循环\u003c/p\u003e\n\u003ch2 id=\"random类\"\u003eRandom类\u003c/h2\u003e\n\u003cp\u003e使用步骤：\u003c/p\u003e","title":"Day04 数组和方法"},{"content":"if的注意点 1、在语句中，如果只有一句代码，那么大括号可以省略不写\nint a = 100; //这不算是一句代码，算是两句代码，一句是定义变量a，另一句是赋值 2、如果对一个布尔类型的变量进行判断，不要使用==号，直接把变量写在小括号中\nswitch语句 switch (表达式){ case 值1: //case后边的值只能是字面量，不能是变量 语句体1; break; case 值2: 语句体2; break; ... default: 语句体n+1; break; } default可以省略，语法不会有问题，但是不建议省略，default可以放在程序的任意位置\ncase穿透，语句体中没有写break导致的\n如果匹配上了，就会执行对应的语句体，如果此时发现了break，那么结束switch语句，如果没有发现break，那么程序就会继续执行下一个case语句，一直到遇到break或者右大括号为止\n如果多个case的语句体重复了，那么我们考虑用case穿透去简化代码\nif else一般是对范围的判断\nswitch 把有限个数据一一列举出来，让我们任选其一\n循环语句 100.fori 可以快速的写出循环100次的\nfor和while的区别 for循环中，控制循环的变量（变量i），归属于for循环的语法结构中，在for循环结束之后，就不能再次访问了（但是改写之后，可以改变这个规则）\nwhile循环中，控制循环的变量（变量i），不归属于while的循环结构中，在while循环结束之后，该变量还能继续访问\nfor循环一般知道循环的次数和范围\nwhile循环不知道次数和范围，但是知道结束条件\n","permalink":"https://wqnm1gb.github.io/posts/day03-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","summary":"\u003ch2 id=\"if的注意点\"\u003eif的注意点\u003c/h2\u003e\n\u003cp\u003e1、在语句中，如果只有一句代码，那么大括号可以省略不写\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//这不算是一句代码，算是两句代码，一句是定义变量a，另一句是赋值\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2、如果对一个布尔类型的变量进行判断，不要使用==号，直接把变量写在小括号中\u003c/p\u003e\n\u003ch2 id=\"switch语句\"\u003eswitch语句\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eswitch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e表达式\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e值1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"c1\"\u003e//case后边的值只能是字面量，不能是变量\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003e语句体1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e值2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003e语句体2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003e语句体n\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003edefault可以省略，语法不会有问题，但是不建议省略，default可以放在程序的任意位置\u003c/p\u003e","title":"Day03 循环语句"},{"content":" 1、基本数据类型\n数据类型 关键字 整数 byte 1 short 2 int 4 long 8在数据值后边加一个L作为后缀，建议使用大写的L 浮点数 float 4数据值后边也需要加一个F作为后缀 double 8 字符 char 2 布尔 boolean 1 整数和小数取值范围大小关系：\n2、引用数据类型\n之后补充\n硬性要求：1、由数字，字母，下划线和美元符号($)组成 2、不能以数字开头 3、不能是关键字 4、区分大小写\n软性建议：\n小驼峰命名法：方法、变量\n1、标识符是一个单词的时候，全部小写\n2、标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写\n大坨峰命名方法：类名\n1、标识符是一个单词的时候，首字母大写\n2、标识符由多个单词组成的时候，每个单词首字母大写\nproject（项目）\nmodule（模块）\npackage（包）\nclass（类）\n加，减，乘，除，取模\n在代码中，如果有小数参与运算，结果可能不精确\n整数参与计算，结果只能得到整数\n1.1小的会先提升为大的，在进行运算\n1.2byte，short和char三种数据类型在进行运算的时候，都会直接先提升为int，然后再进行运算\nbyte a = 10; byte b = 20; c = a + b;//此时的c是int类型 适用于规则1.2 取值范围\nbyte \u0026lt; short \u0026lt; int \u0026lt; long \u0026lt; float \u0026lt;double\n2、强制转换，取值范围大的变成取值范围小的\n要强制转换的是最终的结果\n如果我想把c定义为byte型\nbyte c = a + b //报错 byte c = (byte)a + b //报错，相当于强制转换a byte c = (byte)a + (byte)b //报错，相当于强制转换a和b，并不是转换最后的结果 byte c = (byte)(a + b) //正确 在+的过程中，只要有字符串参与，做的都会是拼接的操作\n连续+从左到右依次+\n+=，-=，*=，/=，%=底层都隐藏了一个强制类型转换\nshort s = 1; s + = 1; //等同于 s = (short)(s+1); 比如第一个不满足了就直接不满足，右边的语句就不会运行了\n|| 短路非 结果与|相同，但是有短路效果\n比如第一个满足了就全满足，右边的语句就不会运行了\n注意事项\n\u0026amp;|，无论左边是TRUE还是FALSE，右边都要执行\n\u0026amp;\u0026amp; || ，如果左边能确定表达式的结果，右边不执行\n关系表达式？表达式1:表达式2\n如果关系表达式是真，那么就使用表达式1，如果为假，那就使用表达式2\n使用的时候的方法是，max = a\u0026gt;b?a:b //把a，b中的最大值赋给max\noption+command+L 会自动格式化代码\n","permalink":"https://wqnm1gb.github.io/posts/day02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/","summary":"\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e1、基本数据类型\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e数据类型\u003c/th\u003e\n          \u003cth\u003e关键字\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e整数\u003c/td\u003e\n          \u003ctd\u003ebyte\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eshort\u003c/td\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003eint\u003c/td\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003elong\u003c/td\u003e\n          \u003ctd\u003e8\u003c!-- raw HTML omitted --\u003e在数据值后边加一个L作为后缀，建议使用大写的L\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e浮点数\u003c/td\u003e\n          \u003ctd\u003efloat\u003c/td\u003e\n          \u003ctd\u003e4\u003c!-- raw HTML omitted --\u003e数据值后边也需要加一个F作为后缀\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003edouble\u003c/td\u003e\n          \u003ctd\u003e8\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e字符\u003c/td\u003e\n          \u003ctd\u003echar\u003c/td\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e布尔\u003c/td\u003e\n          \u003ctd\u003eboolean\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e整数和小数取值范围大小关系：\u003c/p\u003e","title":"Day02 数据类型和运算符"},{"content":"cmd默认操作的是用户命名的文件夹（C:\\users\\用户名）\n盘符名称 + : 能够切换到这个盘符\ndir 查询该目录下的所有文件\nwindow下的文件分隔符是\\ 注意与Linux下的/ 不同\ncls 是清屏命令\nexit 是关闭窗口命令\njava目录 bin中存放了各种工具命令\nJDK java的开发工具 里边包含了 JVM+核心类库+开发工具\nJRE java的运行环境 里边包含了 JVM+核心类库+运行工具\n多行注释是 /* */\n文档注释是/** **/\nJava会先找到main语句，从main开始运行\njavac用于编译\njava用于运行\n类是Java最基本的组成单元\n空类型的null不能直接打印\n在打印的时候，把前边字符串的长度补齐到8，或者8的整数倍，最少补1个空格，最多补8个空格\n用处：打印类似表格数据的时候，让数据对齐\n2、变量名不允许被重复定义\n3、一条语句可以定义多个变量\n4、变量在使用之前一定要进行赋值\n5、变量的作用范围\n十进制：前边不加任何前缀\n八进制：代码中以0开头\n十六进制：代码中以0x开头\n","permalink":"https://wqnm1gb.github.io/posts/day01-java%E5%9F%BA%E7%A1%80/","summary":"\u003cp\u003ecmd默认操作的是用户命名的文件夹（C:\\users\\用户名）\u003c/p\u003e\n\u003cp\u003e盘符名称 + : 能够切换到这个盘符\u003c/p\u003e\n\u003cp\u003edir 查询该目录下的所有文件\u003c/p\u003e\n\u003cp\u003ewindow下的文件分隔符是\\ 注意与Linux下的/ 不同\u003c/p\u003e","title":"Day01 Java基础"},{"content":"Hello World！ ","permalink":"https://wqnm1gb.github.io/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","summary":"\u003ch1 id=\"hello-world\"\u003eHello World！\u003c/h1\u003e","title":"我的第一篇博客"},{"content":"个人学习博客\n","permalink":"https://wqnm1gb.github.io/about/","summary":"about","title":"关于"}]